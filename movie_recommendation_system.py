# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UlI3w6WvpvIczoc98pit58ay4Q1OosJf
"""

import numpy as np
import pandas as pd

movies = pd.read_csv("tmdb_5000_movies.csv" , usecols=["genres" ,"id" , "keywords" , "overview" , "title"])
credits = pd.read_csv("tmdb_5000_credits.csv")

movies.head()

credits.head()

movies = movies.merge(credits , on="title")

movies.shape

movies.isnull().sum()

movies = movies.dropna()

movies.head()

movies.drop("id" , axis =1)

movies["genres"][0]

import ast
def convert(obj):

  lis = list()
  for i in ast.literal_eval(obj):
    lis.append(i["name"])
  return lis

movies["genres"] = movies["genres"].apply(convert)

movies.head()

movies["keywords"][0]

import ast
def convert1(obj):
  lis = list()
  for i in ast.literal_eval(obj):
    lis.append(i["name"])
  return lis

movies['keywords'] = movies["keywords"].apply(convert1)

movies.head()

import ast
def convert2(obj):
  lis = list()
  for i in ast.literal_eval(obj):
    lis.append(i["name"])
  return lis

movies.head()



movies.head()

movies["crew"][0]

import ast
def convert3(obj):
  lis = list()
  for i in ast.literal_eval(obj):
    if i["job"] == "Director":
      lis.append(i["name"])
  return lis

movies["crew"] = movies["crew"].apply(convert3)

movies.head()

movies = movies.drop("id" , axis = 1)

movies.head(2)

movies["genres"] = movies["genres"].apply(lambda x : [i.replace(" ","") for i in x])
movies["keywords"] = movies["keywords"].apply(lambda x : [i.replace(" ","") for i in x])
movies["cast"] = movies["cast"].apply(lambda x : [i.replace(" ","") for i in x])
movies["crew"] = movies["crew"].apply(lambda x : [i.replace(" ","") for i in x])

movies["overview"] = movies["overview"].apply(lambda x : x.split())

movies.head()

movies["tags"] = movies["genres"] +  movies["keywords"] + movies["overview"] + movies["cast"] + movies["crew"]

movies.head()

movies = movies.drop(["genres" , "keywords" , "overview" , "cast" , "crew"] , axis = 1 )

movies.head()

#to remove listing from the tags
movies["tags"] = movies["tags"].apply(lambda x:" ".join(x))

movies.head()

movies = movies.drop("tgas" , axis = 1)

movies.head()

#convert all the tags into lower case letter
movies["tags"] = movies["tags"].apply(lambda x : x.lower())

from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(max_features=5000 , stop_words = "english")

vector = cv.fit_transform(movies["tags"]).toarray()

vector[0]

cv.get_feature_names_out()

cv

from nltk.stem.porter import PorterStemmer

ps = PorterStemmer()

def fun1(a):
  y = []
  for i in a.split():
    y.append(ps.stem(i))
  return " ".join(y)

a = ['love' , 'lovely' , 'loves']
fun1("dance")

movies["tags"] = movies["tags"].apply(fun1)

from sklearn.metrics.pairwise import cosine_similarity

similar = cosine_similarity(vector)
sorted(list(enumerate(similar[0])) , reverse = True , key = lambda x:x[1])[1:6]

def recommend(moviee):
  movie_index = movies[movies["title"] == moviee].index[0]
  distance = similar[movie_index]
  movie_list = sorted(list(enumerate(distance)) , reverse = True , key = lambda x:x[1])[1:6]
  for i in movie_list:
   print( movies.iloc[i[0]].title)

recommend("Batman Begins")

movies.head()

import pickle
pickle.dump(movies , open("movies.pk1" , 'wb'))

pickle.dump(movies.to_dict() , open('movies1.pk1' , 'wb'))

pickle.dump(similar , open("similars.pk1" , 'wb'))

